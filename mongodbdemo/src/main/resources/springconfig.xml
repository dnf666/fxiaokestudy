<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
">
    <context:annotation-config></context:annotation-config>
        <bean id="morphia" class="org.mongodb.morphia.Morphia"></bean>
    <!--&lt;!&ndash;可以扫描基于类的注解，通常使用了这个就不使用<context:annotation-config/>&ndash;&gt;-->
    <!--<context:component-scan base-package="com.path.*"/>-->
    <!--&lt;!&ndash;仅会查找在同一个Application中的bean注解&ndash;&gt;-->
    <!--<context:annotation-config/>-->
    <!--<cache:annotation-driven />-->
    <!--<bean name="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--<property name="jdbcUrl" value="jdbc:mysql://172.22.1.152:3306/path?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true"/>-->
        <!--<property name="user" value="root"/>-->
        <!--<property name="password" value="root"/>-->
        <!--<property name="driverClass" value="com.mysql.jdbc.Driver"/>-->
        <!--&lt;!&ndash;初始化连接池大小&ndash;&gt;-->
        <!--<property name="initialPoolSize" value="5"/>-->
        <!--<property name="acquireIncrement" value="5"/>-->
        <!--<property name="minPoolSize" value="1"/>-->
        <!--<property name="maxPoolSize" value="20"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;spring和mybatis完美整合，不需要mybatis的配置映射文件&ndash;&gt;-->
    <!--<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="datasource"/>-->
        <!--&lt;!&ndash;迭代查找指定路径下的mapper文件，&ndash;&gt;-->
        <!--<property name="mapperLocations" value="classpath*:com/path/dao/**/**/*.xml"/>-->
        <!--<property name="configurationProperties">-->
            <!--<props>-->
                <!--&lt;!&ndash;缓存机制&ndash;&gt;-->
                <!--<prop key="cacheEnable">true</prop>-->
                <!--&lt;!&ndash;在变量为null的时候也调用setter方法&ndash;&gt;-->
                <!--<prop key="callSetterOnNulls">true</prop>-->
            <!--</props>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash;dao接口所在包名，Spring会自动查找其下的类&ndash;&gt;-->
    <!--<bean name="daoManager" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--&lt;!&ndash;这项在这个项目中其实可以不写，因为MapperScannerConfigurer将会自动创建MapperFactoryBean之后自动装配，但是你-->
        <!--如果使用了一个以上的DateSource就会装配失败， 就要以下面的方式指定sqlSessionFactory&ndash;&gt;-->
        <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->
        <!--<property name="basePackage" value="com.path.dao"/>-->
    <!--</bean>-->
    <!--<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">-->
        <!--<property name="caches">-->
            <!--<set>-->
                <!--<bean-->
                        <!--class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"-->
                        <!--p:name="default" />-->
                <!--<bean-->
                        <!--class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"-->
                        <!--p:name="data" />-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash;事务管理， 事务回滚&ndash;&gt;-->
    <!--<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="datasource"/>-->
    <!--</bean>-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--&lt;!&ndash; 事务行为控制 &ndash;&gt;-->
        <!--<tx:attributes>-->
            <!--<tx:method name="save" propagation="REQUIRED" rollback-for="Exception"/>-->
            <!--<tx:method name="insert*" propagation="REQUIRED"  rollback-for="Exception"/>-->
            <!--<tx:method name="add*" propagation="REQUIRED"  rollback-for="Exception"/>-->
            <!--<tx:method name="create*" propagation="REQUIRED"  rollback-for="Exception"/>-->
            <!--<tx:method name="delete*" propagation="REQUIRED"  rollback-for="Exception"/>-->
            <!--<tx:method name="update*" propagation="REQUIRED"  rollback-for="Exception"/>-->
            <!--<tx:method name="find*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="select*" propagation="SUPPORTS" read-only="true" />-->
            <!--<tx:method name="get*" propagation="SUPPORTS" read-only="true" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

</beans>